"""
X·ª≠ l√Ω ƒë·∫∑t l·ªãch kh√°m b·ªánh qua OpenAI Function Calling v√† l∆∞u v√†o Firebase Firestore.
"""

import json
from datetime import datetime
import firebase_admin
from firebase_admin import credentials, firestore
import openai
import streamlit as st

# ==== Firebase Initialization ====
firebase_config = dict(st.secrets["firebase"])
if not firebase_admin._apps:
    cred = credentials.Certificate(firebase_config)
    firebase_admin.initialize_app(cred)
    print("<duypv10 log> Firebase initialized.")
else:
    print("<duypv10 log> Firebase already initialized.")
db = firestore.client()


# ==== Core function: L∆∞u l·ªãch h·∫πn ====
def schedule_appointment(date: str, time: str, patient_name: str, note: str = "") -> str:
    """
    L∆∞u l·ªãch h·∫πn v√†o Firestore.
    """
    try:
        datetime.strptime(f"{date} {time}", "%Y-%m-%d %H:%M")
        formatted_date = datetime.strptime(date, "%Y-%m-%d").strftime("%d/%m/%Y")
        db.collection("appointments").add({
            "date": date,
            "time": time,
            "patientName": patient_name,
            "note": note,
            "status": "pending",
            "createdAt": firestore.SERVER_TIMESTAMP
        })
        return (
            "‚úÖ ƒê·∫∑t l·ªãch th√†nh c√¥ng cho:\n"
            f"- Ng∆∞·ªùi ƒë·∫∑t l·ªãch: {patient_name}\n"
            f"- Ng√†y kh√°m: {formatted_date}\n"
            f"- Gi·ªù kh√°m: {time}\n"
            f"- M·ª•c kh√°m: {note}\n"
            "\nTh√¥ng tin li√™n h·ªá:\n"
            "\nüìç 123 Th·ª•y Khu√™, Ph∆∞·ªùng T√¢y H·ªì, TP H√† N·ªôi\n"
            "\nüìû Hotline (24/24): 0912345678\n"
        )
    except ValueError:
        return "‚ùå Sai ƒë·ªãnh d·∫°ng ng√†y ho·∫∑c gi·ªù. D√πng YYYY-MM-DD v√† HH:MM."


# ==== Function ƒë·ªÉ l·∫•y ng√†y hi·ªán t·∫°i ====
def get_current_datetime() -> str:
    """L·∫•y ng√†y gi·ªù hi·ªán t·∫°i theo m√∫i gi·ªù Vi·ªát Nam"""
    from datetime import datetime, timezone, timedelta
    
    vietnam_tz = timezone(timedelta(hours=7))
    current_time = datetime.now(vietnam_tz)
    
    result = {
        "current_datetime": current_time.strftime("%Y-%m-%d %H:%M:%S"),
        "date": current_time.strftime("%Y-%m-%d"),
        "time": current_time.strftime("%H:%M:%S"),
        "day_of_week": current_time.strftime("%A"),
        "timezone": "UTC+7 (Vietnam)"
    }
    
    return json.dumps(result, ensure_ascii=False, indent=2)

# ==== Schema cho OpenAI Function Calling ====
get_current_datetime_schema = {
    "name": "get_current_datetime",
    "description": "L·∫•y ng√†y gi·ªù hi·ªán t·∫°i theo m√∫i gi·ªù Vi·ªát Nam ƒë·ªÉ x·ª≠ l√Ω c√°c ng√†y t∆∞∆°ng ƒë·ªëi nh∆∞ 'ng√†y mai', 'tu·∫ßn sau'",
    "parameters": {
        "type": "object",
        "properties": {},
        "required": []
    }
}

schedule_appointment_schema = {
    "name": "schedule_appointment",
    "description": "ƒê·∫∑t l·ªãch kh√°m v√† l∆∞u v√†o Firebase Firestore",
    "parameters": {
        "type": "object",
        "properties": {
            "date": {"type": "string", "description": "Ng√†y (YYYY-MM-DD)"},
            "time": {"type": "string", "description": "Gi·ªù (HH:MM)"},
            "patient_name": {"type": "string", "description": "T√™n b·ªánh nh√¢n"},
            "note": {"type": "string", "description": "ƒêƒÉng k√Ω m·ª•c kh√°m"}
        },
        "required": ["date", "time", "patient_name", "note"]
    }
}


# ==== H√†m x·ª≠ l√Ω function_call t·ª´ GPT ====
def handle_function_call(tool_call):
    """
    Nh·∫≠n tool_call t·ª´ OpenAI, parse argument v√† g·ªçi h√†m t∆∞∆°ng ·ª©ng.
    """
    func_name = tool_call.function.name
    
    if func_name == "get_current_datetime":
        return get_current_datetime()
    elif func_name == "schedule_appointment":
        args = json.loads(tool_call.function.arguments)
        return schedule_appointment(**args)

    return f"‚ùå Function '{func_name}' ch∆∞a ƒë∆∞·ª£c h·ªó tr·ª£."


# Bi·∫øn l∆∞u context h·ªôi tho·∫°i
session_data = {"date": None, "time": None, "patient_name": None, "note": None}
chat_history = []

# ==== H√†m x·ª≠ l√Ω request ƒë·∫∑t l·ªãch ====
class AppointmentProcessor:
    def __init__(self, api_key: str, base_url: str):
        """
        Truy·ªÅn API key v√† endpoint t·ª´ main.py v√†o ƒë·ªÉ d√πng OpenAI.
        """
        self.client = openai.OpenAI(
            base_url=base_url,
            api_key=api_key,
        )

    def process_with_function_calling(self, user_input: str):
        global session_data, chat_history

        # L∆∞u user_input
        chat_history.append({"role": "user", "content": user_input})

        # N·∫øu l√† l·∫ßn ƒë·∫ßu ti√™n th√¨ th√™m system prompt
        if len(chat_history) == 1:
            chat_history.insert(0, {
                "role": "system",
                "content": "B·∫°n l√† tr·ª£ l√Ω y t·∫ø, gi√∫p ƒë·∫∑t l·ªãch kh√°m b·ªánh. Khi ng∆∞·ªùi d√πng n√≥i 'ng√†y mai', 'tu·∫ßn sau', h√£y g·ªçi get_current_datetime ƒë·ªÉ bi·∫øt ng√†y hi·ªán t·∫°i r·ªìi t√≠nh to√°n ng√†y ch√≠nh x√°c. N·∫øu thi·∫øu th√¥ng tin, h√£y h·ªèi ti·∫øp l·ªãch s·ª±, r√µ r√†ng."
            })

        # G·ª≠i sang GPT s·ª≠ d·ª•ng function-calling v·ªõi c·∫£ 2 functions
        response = self.client.chat.completions.create(
            model="gpt-4o-mini",
            messages=chat_history,
            tools=[
                {"type": "function", "function": get_current_datetime_schema},
                {"type": "function", "function": schedule_appointment_schema}
            ],
            tool_choice="auto",
            temperature=0
        )

        choice = response.choices[0]

        if choice.finish_reason == "tool_calls" and choice.message.tool_calls:
            tool_call = choice.message.tool_calls[0]
            func_name = tool_call.function.name
            
            if func_name == "get_current_datetime":
                # L·∫•y th√¥ng tin ng√†y hi·ªán t·∫°i
                datetime_result = get_current_datetime()
                
                # Th√™m k·∫øt qu·∫£ v√†o chat history v√† g·ªçi l·∫°i GPT
                chat_history.append(choice.message)
                chat_history.append({
                    "role": "tool",
                    "tool_call_id": tool_call.id,
                    "content": datetime_result
                })
                
                # G·ªçi l·∫°i GPT v·ªõi th√¥ng tin ng√†y hi·ªán t·∫°i
                response2 = self.client.chat.completions.create(
                    model="gpt-4o-mini",
                    messages=chat_history,
                    tools=[
                        {"type": "function", "function": get_current_datetime_schema},
                        {"type": "function", "function": schedule_appointment_schema}
                    ],
                    tool_choice="auto",
                    temperature=0
                )
                
                choice2 = response2.choices[0]
                if choice2.finish_reason == "tool_calls" and choice2.message.tool_calls:
                    # X·ª≠ l√Ω schedule_appointment call
                    tool_call2 = choice2.message.tool_calls[0]
                    if tool_call2.function.name == "schedule_appointment":
                        args = json.loads(tool_call2.function.arguments)
                        session_data.update({k: v for k, v in args.items() if v})
                        
                        if all(session_data.values()):
                            result = schedule_appointment(**session_data)
                            ai_response = result
                            session_data = {"date": None, "time": None, "patient_name": None, "note": None}
                            chat_history = []
                        else:
                            ai_response = f"Hi·ªán c√≥: {session_data}. B·∫°n vui l√≤ng cung c·∫•p th√¥ng tin c√≤n thi·∫øu."
                    else:
                        ai_response = choice2.message.content or "‚ùå Kh√¥ng nh·∫≠n d·∫°ng ƒë∆∞·ª£c y√™u c·∫ßu."
                else:
                    ai_response = choice2.message.content or "‚ùå Kh√¥ng nh·∫≠n d·∫°ng ƒë∆∞·ª£c y√™u c·∫ßu."
                    
            elif func_name == "schedule_appointment":
                args = json.loads(tool_call.function.arguments)
                session_data.update({k: v for k, v in args.items() if v})

                if all(session_data.values()):
                    result = schedule_appointment(**session_data)
                    ai_response = result
                    session_data = {"date": None, "time": None, "patient_name": None, "note": None}
                    chat_history = []
                else:
                    ai_response = f"Hi·ªán c√≥: {session_data}. B·∫°n vui l√≤ng cung c·∫•p th√¥ng tin c√≤n thi·∫øu."
            else:
                ai_response = "‚ùå Function kh√¥ng ƒë∆∞·ª£c h·ªó tr·ª£."
        else:
            ai_response = choice.message.content or "‚ùå Kh√¥ng nh·∫≠n d·∫°ng ƒë∆∞·ª£c y√™u c·∫ßu."

        # L∆∞u ph·∫£n h·ªìi AI
        chat_history.append({"role": "assistant", "content": ai_response})

        return {"ai_response": ai_response}


